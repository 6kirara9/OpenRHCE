Session 6 Virtualization
================================

Virtualization Terms
--------------------------

Physical Machine
    The actual physical machine with RAM, disk space, etc.

Virtual Machine 
    A logical construct provided by hardware and/or software capabilities that can run an independent OS and perform work as though it were a physical machine.

Hypervisor
    A specialized OS that provides virtual machines.

Xen
    A hypervisor previously available on Red Hat operating systems that was implemented as a modified version of the Linux kernel.

KVM
    Kernel Virtual Machine, the hypervisor Red Hat currently supports on RHEL6. It is implemented within (as a set of kernel modules) the mainstream Linux kernel.

Guest
    The operating system that runs on a virtual machine.

Host
    The operating system that runs on a physical machine hosting virtual machines (i.e. the hypervisor).

RHEL6 KVM requirements
-------------------------

* 64-bit Intel or AMD processor

    To confirm, search ``/proc/cpuinfo`` for the string ``lm`` on the flags line.

* CPU Hardware assisted virtualization extensions (enabled in BIOS)

    To confirm, search ``/proc/cpuinfo`` for the string ``vmx`` (for Intel) or ``svm`` (for AMD)

* 64-bit version of RHEL6

    To confirm, look for ``x86_64`` in the output of ``uname -m``.
    

KVM Virtualization Components
-----------------------------------

* KVM kernel modules

* libvirt

* ``virsh`` virtualization shell

* ``virt-manager``

Installing Virtualization Capabilities
---------------------------------------------

At OS Installation:
    Select the ``Virtual Host`` server role --or-- customize packages and select the ``Virtualization`` package group. In a kickstart file, these packages can be installed as a group with the ``@kvm`` group name.

After Installation:
    With entitlement to the Virtualization packages, or access to them through a 3rd party repository,: ``yum install kvm``

Other recommended packages:

    * python-virtinst
    * libvirt
    * libvirt-python
    * virt-manager
    * libvirt-client

Virsh Commands
--------------------

Power on a virtual machine::

    virsh start <vm name>

Gracefully shut down a virtual machine::

    virsh shutdown <vm name or id>

Power off a virtual machine::

    virsh destroy <vm name or id>

Connect to a virtual machine console (requires guest configuration)::

    virsh console <vm name or id>

Disconnect from a console of a virtual machine::

    ^]  ( "ctrl + ]" )

Set a VM to start at boot::

    virsh autostart <vm name or id>
    
Creating Virtual Machines with Virt-Manager
-------------------------------------------------

Demonstrated and practiced in the classroom.


Creating Virtual Machines with virt-install
---------------------------------------------

``virt-install`` is a command-line tool used to create virtual machines.

See the syntax with ``man virt-install`` or ``virt-install --help``.

Sample command::

    # virt-install --name StXVM3 --ram 768 \
    --disk path=/var/lib/libvirt/images/StXVM3disk1.img,size=8\
    --network network=default --cdrom /dev/cdrom



SELinux considerations
-----------------------------

* SELinux expects file-based guest images to be stored in ``/var/lib/libvirt/images/``. Use of other locations with SELinux enforcing will require adding the location to the SELinux policies.

#. Find the context applied to the expected location::
    
    # ll -Z /var/lib/libvirt/

    drwx--x--x. root root system_u:object_r:virt_image_t:s0 images

#. Add a new context policy::

    # semanage fcontext -a -t virt_image_t "/virtstorage(/.*)?"

#. Set the context to match the newly created policy::

    # restorecon -R -v /virtstorage/
    restorecon reset /virtstorage context unconfined_u:object_r:
    default_t:s0->system_u:object_r:virt_image_t:s0



.. o KVM Virtualization
.. + * Configure a physical machine to host virtual guests
.. + * Install Red Hat Enterprise Linux systems as virtual guests
.. + * Configure systems to launch virtual machines at boot
.. + * Install Red Hat Enterprise Linux automatically using Kickstart


