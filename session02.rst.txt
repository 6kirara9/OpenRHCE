Session 2 Storage and filesystems
======================================

"Filesystem" - Disambiguation
------------------------------------

Several meanings for the term:



* The way files are physically written to storage devices, as in  the ext3, Fat-32, NTFS filesystems, or etc.

* The unified directory structure which logically organizes files

* The standard which defines how directories should be structured and utilized in Linux




Linux Filesystem Hierarchy
---------------------------------------------

The directory structure of a Linux system is standardized through the Filesystem Hierarchy Standard (explained at http://www.pathname.com/fhs)

The Linux Manual system has an abbreviated reference:

``$ man 7 hier``

Red Hat has a more complete description, along with RedHat-specific implementation decisions in their **Deployment Guide** at http://www.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/5/html/Deployment_Guide/ch-filesystem.html

.. for future development, consider expanding this...

Disk and Filesystem tools
---------------------------------


* ``fdisk`` or ``parted`` -- Used to partition hard disks or other block devices


* ``mkfs`` and variants -- Used to create filesystems on block devices (actually a front-end for a variety of FS-specific tools)


* ``fsck`` and variants -- Used to run filesystem checks (a front-end to FS specific tools)


* ``mount`` -- Used to mount a filesystem to a specific location in the directory structure


* ``/etc/fstab`` -- Configuration file used to describe the filesystems that should be persistently mounted

* ``blkid`` -- used to identify filesystems or other in-use devices by UUID or filesystem labels.

* ``df`` -- used to display the capacity and utilization % of mounted filesystems.

* ``partx`` -- used to force implementation of a new partition table on an in-use device w/o the need to reboot.


Working with Partitions
-------------------------------------------

Overview of process for using Basic Storage Devices:

* Install the device or otherwise make it available to the system.
* Partition it with ``fdisk`` or ``parted``.
* Create a filesystem on the partition with mkfs or other tools.
* Choose or create a directory to serve as a mount point.
* Mount the partition.
* Add an entry to ``/etc/fstab`` to make it persistent.

.. List, create, delete and set partition type for primary, extended, and logical partitions

Working with Logical Volume Management
--------------------------------------------------------

Overview of process for using Logical Volume Management:

* Install the device or otherwise make it available to the system.
* Create a type ``8e`` partition with ``fdisk`` or ``parted``. 
* Initialize the partition as a physical volume with ``pvcreate``.
* Add the storage of the PV to a volume group with ``vgcreate``.
* Allocate storage from the volume group to a logical volume with ``lvcreate``.
* Create a filesystem on the logical volume with mkfs or other tools.
* Choose or create a directory to serve as a mount point.
* Mount the partition.
* Add an entry to ``/etc/fstab`` to make it persistent.


.. Create and remove physical volumes, assign physical volumes to volume groups, create and delete logical volumes


Removing Logical Volume structures
----------------------------------------

* Unmount the lv you want to remove
* Edit /etc/fstab to remove its entry
* Remove the logical volume: ``lvremove /dev/<vg>/<lv>``
* Before removing a VG, ensure there are no more LVs within it.
* Remove the volume group: ``vgremove /dev/<vg>``
* Remove the LVM signature from the partitions: ``pvremove /dev/<part>``


Commands to Know
---------------------------------------

fdisk

* Always use -u and -c for best compatibility with newer storage devices
* Can't create partitions >= 2TB, use parted with GPT instead

mkfs

* Used to create filesystems on devices
* Front-end for other filesystem-specific tools (usually named mkfs.<fstype>)

blkid

* Shows device name, Fileystem Labels, and UUID of detected block devices.
* May not show block devices until a filesystem is created on them.
* May not show block devices used in non-standard ways (for example, a filesystem on a whole disk instead of on a partition)

mount

* used to make a new filesystem available 


Working with LUKS encrypted storage
-----------------------------------------------------

cryptsetup-luks-1.1.2-2.el6.x86_64

Overview of process for using LUKS encryption:

* Create a new partition
* Encrypt it with ``cryptsetup luksFormat /dev/<partition>``
* Open the encrypted device and assign it a name with ``cryptsetup luksOpen /dev/<partition> <name>``
* Create a filesystem on the named device (/dev/mapper/<name>)
* Create a mountpoint for the device
* Mount the device

To lock the volume:

* unmount it
* Use ``cryptsetup luksClose <name>`` to remove the decryption mapping

Persistent mounting of LUKS devices
------------------------------------------------------

To persistently mount it

 * Create an entry in /etc/crypttab::

    <name> /dev/<partition> <password (none|<blank>|<path/to/file/with/password>)>

 * If the password field is "none" or left blank, the system will prompt for a password.

 * Create an entry in /etc/fstab

 .. note::

    At reboot, the password prompt goes only to the default console.  If console redirection is enabled, as it might be in the case of enabling a virtual machine to accessible through ``virsh console <name>``, then the only place where the prompt is seen and the passphrase can be entered is at that redirected console.

.. Create and configure LUKS-encrypted partitions and logical volumes to prompt for password and mount a decrypted file system at boot

Working with SWAP
--------------------------------------

Overview of process for adding SWAP space using a partition:

* Create a type 82 partition
* Initialize as swap with ``mkswap /dev/<partition>``
* Identify the UUID with ``blkid``
* Add an ``/etc/fstab`` line::

     UUID=<UUID> swap swap defaults 0 0

* Activate the new swap space with: ``swapon -a``

Using a file for SWAP 
-----------------------------------------

Overview of process for adding SWAP space using a file:

* create a pre-allocated file of the desired size::

    dd if=/dev/zero of=/path/to/<swapfile> bs=1M count=<size in MB>

* Initialize as swap with ``mkswap /path/to/<swapfile>``
* Add an ``/etc/fstab`` line:: 

    /path/to/<swapfile> swap swap defaults 0 0
    
* Activate the new swap space with: ``swapon -a``

Mounting Using UUIDs and Filesystem Labels
------------------------------------------------------

Configure systems to mount file systems at boot by Universally Unique ID (UUID) or label

Local Storage: Adding New Storage
-------------------------------------

Add new partitions, logical volumes, and swap to a system non-destructively

File systems: Working with Common Linux Filesystems
--------------------------------------------------------

Create, mount, unmount and use ext2, ext3 and ext4 file systems

Extend existing unencrypted ext4-formatted logical volumes



Filesystem Permissions: Basic Permissions
--------------------------------------------------------


Linux permissions are organized around:


* Three sets of permissions -- User, Group, and Other


* Three types of permissions -- Read, Write, and Execute


* Three extended attributes -- SUID, SGID, and Stickybit





Three Sets of Permissions:
-------------------------------

Any given file or directory can be owned by one (and only one) user and one (and only one) group. Three different sets of permissions can be assigned.



* User -- User permissions apply to the individual user who owns the file or directory.

* Group -- Group permissions apply to any user who is a member of the group that owns the file or directory.

* Other -- Other permissions apply to any user account with access to the system that does not fall into the previous categories.




Three Types of Permissions:
---------------------------------

* Read ("r")

    * On a file, allows reading

    * On a directory, allows listing

* Write ("w")
        
    * On a file, allows editing

    * On a directory, allows creation and deletion of files

* Execute ("x")

    * On a file, allows execution if the file is otherwise executable (script or binary)

    * On a directory, allows entry or traversal (``# cd {dirname}``)





Three Extended Attributes:
---------------------------------



* SUID (Set User ID) 
        On an executable, runs a process under the UID of the file owner rather than that of the user executing it. 



* SGID (Set Group ID)
        On a directory, causes any files created in the directory to belong to the group owning the directory.



* "Stickybit"  
        On a directory, ensures that only the owner of a file or the owner of the directory can delete it, even if all users or other members of a group have write access to the directory.




Viewing Permissions 
----------------------------

Permissions are displayed with positions 2-10 of a "long" filelisting:

    .. image:: images/permblock.gif
        :width: 40%




Setting Permissions
-----------------------

The ``chmod`` command is used to set permissions on both files and directories.  It has two modes -- one using symbolic options and one using octal numbers.



``chmod [option] [ugoa...][+-=][rwxst] filename``
    where ugo are user, group, other, or all and rwxst are read, write, execute, s{u/g}id, stickybit.



``chmod [option] XXXX filename``
    where XXXX is a number representing the complete permissions on the file.



Setting Permissions with Numeric Options
-------------------------------------------------



+--------------+-----------+-----------+-----------+
|              | User      |  Group    | Other     |
+==============+===+===+===+===+===+===+===+===+===+
|Permissions   | r | w | x | r | w | x | r | w | x |
+--------------+---+---+---+---+---+---+---+---+---+
|Numeric Value | 4 | 2 | 1 | 4 | 2 | 1 | 4 | 2 | 1 |
+--------------+---+---+---+---+---+---+---+---+---+
|Sum           |   0-7     |    0-7    |    0-7    |
+--------------+-----------+-----------+-----------+



+--------------+-----------+-----------+-----------+
| example.txt  | User      |  Group    | Other     |
+==============+===+===+===+===+===+===+===+===+===+
|Permissions   | r | w | x | r |\- | x |\- |\- | x |
+--------------+---+---+---+---+---+---+---+---+---+
|Numeric Value | 4 | 2 | 1 | 4 | 0 | 1 | 0 | 0 | 1 |
+--------------+---+---+---+---+---+---+---+---+---+
|Sum           |     7     |    5      |     1     |
+--------------+-----------+-----------+-----------+



``# chmod 751 myfile.txt``


Setting Extended Attributes with Numeric Options
--------------------------------------------------



chmod numeric options are actually 4 digits (not three).  Missing digits are assumed to be leading zeroes. 



The leftmost place is for extended attributes:




+-----------+-------+-------+-----------+
| Attribute | SUID  | SGID  | Stickybit |
+===========+=======+=======+===========+
| Value     | 4     | 2     | 1         |
+-----------+-------+-------+-----------+



**Example:** ``$ chmod 3775 MySharedDir``



Setting Extended Attributes with Symbolic Values:
--------------------------------------------------------

``chmod +t {filename}``
        Sets the sticky bit

``chmod u+s {filename}``
        Sets suid

``chmod g+s {filename}`` 
        Sets sgid


Extended Attributes in Directory Listings
--------------------------------------------------

===========  ==================================================
\-rwxrwxrwx   Normal Permissions, All permissions granted  
\-rwSrwxrwx   Indicates SUID set
\-rwsrwxrwx   Indicates SUID and execute permission set
\-rwxrwSrwx   Indicates SGID set
\-rwxrwsrwx   Indicates SGID and execute permission set
\-rwxrwxrwT   Indicates Stickybit set
\-rwxrwxrwt   Indicates Stickybit and execute permission set
===========  ==================================================
   


Umask
--------------

* The umask value determines the permissions that will be applied to newly created files and directories.

* As a "mask" it is subtractive -- representing the value of the permissions you DO NOT want to grant.

* Execute rights are automatically withheld (w/o regard for the umask) for *files* but not for *directories*.

* Extended attributes are not addressed -- even though a umask is four characters.

* The default umask value is set in /etc/bashrc and can be modified (non-persistently!) with the bash built-in command ``umask``.




Umask Examples
--------------------------

* Umask of 0002 yields permissions of 0775 on new directories and 0664 on new files
        
* Umask of 0022 yields permissions of 0755 on new directories and 0644 on new files



SGID and Stickybit Use Case -- Collaborative Directories
-------------------------------------------------------------------

* Create a Group for Collaboration
* Add users to the group
* Create a directory for collaboration
* Set its group ownership to the intended group
* Set its group permissions appropriately
* Recursively set the SGID and sticky bits on the directory

This ensures that:

    #. All files created in this directory will be owned by the intended group (SGID effect)

    #. All files created in this directory can only be deleted by the user who owns the file or the user who owns the directory (stickybit effect)
    

File Access Control Lists
--------------------------------------------------------


* Provide more granular control of permissions.

* Filesystem must be mounted with the 'acl' option or be compiled with that option by default

getfacl

setfacl



getfacl
------------------

Example of "getfacl acldir"
::

  # file: acldir
  # owner: frank
  # group: frank
  user::rwx
  user:bob:-wx
  user:mary:rw-
  group::rwx
  mask::rwx
  other::r-x

Example of ``ls -l acldir``::

  drwxrwxr-x+ 2 frank frank 4096 2009-05-27 14:15 acldir


.. Create and manage File Access Control Lists


Working with CIFS network file systems
----------------------------------------------------------------

Will be covered in more detail later.



Mount and unmount CIFS network file systems

Working with NFS file systems
--------------------------------------------------

Mount and unmount NFS file systems


iSCSI Devices
-------------------------------------------------------------------------

Package: iscsi-initiator-utils

Allows a system to access remote storage devices with SCSI commands as though it were a local hard disk.

Terms:

* iSCSI initiator: A client requesting access to storage
* iSCSI target: Remote storage device presented from an iSCSI server or "target portal"
* iSCSI target portal: A server providing targets to the initiator
* IQN: "iSCSI Qualified Name" -- a unique name.  Both the initiator and target need such a name to be assigned


Accessing iSCSI Devices
------------------------------------------------

* Install the iscsi-initiator-utils package
* Start the ``iscsi`` and ``iscsid`` services (and configure them persistently on)
* Set the initiator IQN in /etc/iscsi/initiatorname.iscsi
* Discover targets with::

    iscsiadm -m discovery -t st -p <portal IP address>

* Log in to the target using the name displayed in discovery::

    iscsiadm -m node -T <IQN> -p <portal IP address> -l

* Identify the SCSI device name with ``dmesg``, ``tail /var/log/messages`` or ``ls -l /dev/disk/by-path/*iscsi*``

* Use the disk as though it were a local hard disk

.. important::

    Be certain to use UUIDs or labels for persistent mounts in ``/etc/fstab``.  Also, provide ``_netdev`` as a mount option so that this device will not be mounted until the network is already up.
.. Configure a system as an iSCSI initiator that persistently mounts an iSCSI target

Disconnecting from iSCSI Devices
------------------------------------------------------

* Ensure the device is not in use
* Unmount the device
* Remove its ``/etc/fstab`` entry
* Logout from the target::

    iscsiadm -m node -T <IQN> -p <portal IP> -u

* Delete the local record::

    iscsiadm -m node -T <IQN> -p <portal IP> -o delete
    

Additional References
-------------------------

* Chapter 4 of the Storage Administration Guide for RHEL6 (http://docs.redhat.com/docs/en-US/Red_Hat_Enterprise_Linux/6/html/Storage_Administration_Guide/index.html) covers the usage of parted.

* Man pages for fdisk(8), fstab(5), mkfs(8), blkid(8), partprobe(8), mount(8), parted(8), cryptsetup(8), and crypttab(5)

