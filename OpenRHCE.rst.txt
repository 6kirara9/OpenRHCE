.. Sequence of section adornments:
.. ==--
.. ==--==--__++~~^^

.. header::

    RHCE Preparation (RHEL6)

.. |copy| unicode:: 0xA9 .. copyright sign

.. footer::

    Copyright |copy| 2011, Scott Purcell, CC BY-NC-SA 3.0
    

=======================
OpenRHCE
=======================
-------------------------------------------------------
A Creative Commons Courseware for RHCE Preparation
-------------------------------------------------------


Course Outline
=======================

.. contents::


.. include::  session01.rst.txt

.. include::  session02.rst.txt



Session 3 Managing software, processes, kernel attributes, and users and groups
==================================================================================

The Red Hat Network (RHN)
--------------------------

The primary delivery mechanism for installable software, updates, errata and bug fixes and systems management functions for an installation of RHEL 6 is the Red Hat Network or RHN.

The "cost" of RHEL 6 is really a subscription to this support network.

These commands are using in managing an RHN subscription::

    # man -k rhn
    rhn-profile-sync     (8)  - Update system information on Red Hat Network
    rhn_check            (8)  - Check for and execute queued actions on RHN
    rhn_register         (8)  - Connect to Red Hat Network
    rhnplugin            (8)  - Red Hat Network support for yum(8)
    rhnplugin.conf [rhnplugin] (5)  - Configuration file for the rhnplugin(8) yum(8) plugin
    rhnreg_ks            (8)  - A program for non interactively registering systems to Red Hat Network
    rhnsd                (8)  - A program for querying the Red Hat Network for updates and information

RHN Subscription Activation
-----------------------------------------------------

A new user of RHEL6 should receive information similar to this::

     
    Red Hat subscription login:
        Account Number       : *******
        Contract Number      : *******
        Item Description     : Red Hat Enterprise Linux <Edition>
        RHEL Subscription Number : *******************
        Quantity             : #
        Service Dates        : 12-JUN-10 through 11-JUN-11
        Customer Name : *********************************
        Account Number: ************
        Log into the new portal here: access.redhat.com
        Login: *************
        Password: **************
        Email address: ****************************

That information can then be used with ``rhn_register`` to activate a new subscription

3rd Party Yum Repositories
----------------------------------

These are other repositories of installable software, updates, or bugfixes.  The ``yum`` command can be configured to use them in addition to or instead of the RHN.

* Configuration of repositories other than the RHN is accomplished through text configuration files located in the directory: ``/etc/yum.repos.d/``

* A configuration file for each repository (or group of related repos) should be created in ``/etc/yum.repos.d/`` 

* The name of each repo config file should end in ".repo".

* This allows repos to be easily temporarily disabled simply by renaming the file to something like: ``myrepo.repo.disabled``

Yum Repository Mandatory Configuration Items
----------------------------------------------

Repository ID
    Short name for identifying this repository in reports

    ::

        [MyRepo]

Name
    Longer description of this repository

    ::

        name=My Custom Repository

Baseurl
    Description of protocol and location needed to locate the repo files.

    ::

        baseurl=ftp://192.168.5.200/pub/rhel6


Yum Repository Common Optional Configuration Items
-----------------------------------------------------

gpgcheck
    Defines whether yum should attempt to validate package signatures. "0" = "off", "1" = "on".

    ::

        gpgcheck=1

gpgkey
    Defines (via URL) where the keys for signature validation are located (typically ``file:///etc/pki/rpm-gpg/<key name>``)

    ::

        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release

enabled
    (Optional) Defines whether this repository should be currently active. "0" = "off", "1" = "on".

    ::

        enabled=1




Managing Software: Using yum
--------------------------------

Common commands:

``yum help``
    Displays usage information.

``yum list``
    Lists all available packages and indicates which are installed.
    
``yum search KEYWORD``
    Searches for packages with a keyword in the package metadata.

``yum info PACKAGENAME``
    Displays information about a package taken from the package metadata.

``yum install PACKAGENAME``
    Installs a package (obtained from the repository) and any required dependencies.

``yum localinstall RPMFILENAME``
    Installs a local .rpm file, but uses the repository to satisfy dependencies.

``yum remove PACKAGENAME``
    Uninstalls a package and any other packages dependent upon it.

``yum update PACKAGENAME``
    Installs a newer version of the package, if available.

``yum update``
    Updates an installed package for which a newer version is available.


Yum-related man pages
------------------------
::

    # man -k yum
    qreposync             (1)  - synchronize yum repositories to a local directory
    rhnplugin            (8)  - Red Hat Network support for yum(8)
    rhnplugin.conf [rhnplugin] (5)  - Configuration file for the rhnplugin(8) yum(8) plugin
    yum                  (8)  - Yellowdog Updater Modified
    yum [yum-shell]      (8)  - Yellowdog Updater Modified shell
    yum-groups-manager   (1)  - create and edit yum's group metadata
    yum-utils            (1)  - tools for manipulating repositories and extended package management
    yum.conf [yum]       (5)  - Configuration file for yum(8)



RPM Architecture
----------------------

``rpm`` executable

RPM packages -- Files to install + SPEC file (metadata)

Local RPM database -- retains metadata from all installed packages

	Database is kept in /var/lib/rpm
	

	
RPM Package Naming
-------------------------

* name-version-release.architecture*.rpm

* Version is the version of the "upstream" open source code
	
* Release refers to Red Hat internal patches to the source code
	
* Architecture is one of:
	
	* i386,i686 -- 32 bit x86 compatible
	* x86_64 -- Intel/AMD 64 bit 
	* ppc64 -- Power PC 64 bit
	* ia64 -- Intel Itanium 64 bit
	* noarch -- Arch-independent code (scripts, docs, images, etc)
	* src -- Source code



Package Naming Example
----------------------------

bash-3.2-24.el5.x86_64.rpm

======      =================   ============     ========
 Name        Project Version     RH Release       Arch
======      =================   ============     ========
 bash        3.2                 24.el5           x86_64
======      =================   ============     ========

This package starts with version 3.2 of bash (from ftp.gnu.org/gnu/bash), applies a RH patch identified as 24.el5 to it, and is then built to run on an Intel/AMD 64 bit processor.




Installing and Upgrading Packages
-----------------------------------

``# rpm -i[v,h] name-ver-rel.arch.rpm``
	Installs a package 
	
``# rpm -U[v,h] name-ver-rel.arch.rpm``
	Upgrades a package if an older version was previously installed. Otherwise, simply installs the new version.
	
``# rpm -F[v,h] name-ver-rel.arch.rpm``
	Upgrades a package if an older version is installed.  Otherwise, does nothing -- **does not install new packages if no older version was installed.**
	
	
Upgrading a Kernel
---------------------------

* Always use ``#rpm -i ...``

* This leaves the previously installed kernel on the system and in the GRUB menu as a fall-back in case the new version has problems.	


RPM and Modified Config Files
------------------------------------

Scenario: niftyapp-1.0-1.el5.rpm uses a config file, ``/etc/nifty.conf``. You tweaked ``/etc/nifty.conf`` to fit your system.  Now niftyapp-2.0-1.el5.rpm is available with new features that require changes in the .conf file and provides a new default config file.  What to do?

* If the previous version provided a default config file, the changes are detected.  Your modified version of the .conf file is saved as ``/etc/nifty.conf.rpmsave`` and the new default config is installed.  You can compare the files and modify as needed.

* If the previous version did NOT provide a default config file, your version of the .conf file is saved as ``/etc/nifty.conf.rpmorig`` and the new default config is installed.  You can compare the files and modify as needed.




Uninstalling
--------------------------

``# rpm -e name[-ver][-rel]``

* Package removal is never verbose, never shows progress ( -v, -h have not effect)

* Package removal only needs the name (or when multiple versions of the same package are installed, sometimes the version or release) but not the architecture or the .rpm extension.


RPM over a Network
------------------------

``# rpm -ivh ftp://{Host}/path/to/packagename-ver-rel.arch.rpm``

``# rpm -ivh http://{Host}/path/to/packagename-ver-rel.arch.rpm``

And wildcard "globbing" is allowed:
	
``# rpm -ivh http://{Host}/path/to/packagename*``
	

Common RPM Queries
--------------------------

=========================           ==============================================================
Query                                  Result
=========================           ==============================================================
rpm -qa                                lists all installed packages.
rpm -q pkg                             Reports the version of the package.
rpm -qf /path/file                     Reports which package provided the file.
rpm -qc pkg                            Lists all configuration files of the package.
rpm -qd pkg                            Lists all documentation of the package.
rpm -qi pkg                            Reports a description of the package.
rpm -ql pkg                            Lists all files contained in the package.
rpm -qR pkg                            Lists all dependencies.
rpm -q --scripts                       Lists the scripts that run when installing/removing.
=========================           ==============================================================

rpm -q{c|d|i|l|R}p /path/to/packagename-ver-rel-arch.rpm
	Reports the same info as above, but pulls info from the .rpm file instead of the rpm database.


RPM Verification
-----------------------

The RPM system satisfies two types of security concerns:

#. Is this package *authentic*?  How do I know it came from Red Hat?

#. Has this package retained *integrity*? How do I know they haven't been modified?

Authenticity and integrity of packages can be confirmed prior to installation with GPG signing and MD5 checksums of the RPM packages.

Integrity of files can be confirmed after installation with verification of installed files against the recorded metadata in the package.


Validate Package Signatures
------------------------------------

1. Import the Red Hat GPG public key (It can be found on the installation CD or in the /etc/pki/rpm-gpg/ directory)::
	
	# rpm --import /media/disk/RPM-GPG-KEY-redhat-release
	
or::
	
	# rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
	
2. Check the signature of the package in question::

	# rpm --checksig /path/to/package-ver-rel.arch.rpm
	


RPM Checksig Sample Output 
-----------------------------


``$ rpm --checksig ftp://linuxlib.us.dell.com/``
``pub/Distros/RedHat/RHEL5/5.3/Server/x86_64/``
``install-x86_64/Server/ImageMagick-6.2.8.0-4``
``.el5_1.1.i386.rpm``

``ftp://linuxlib.us.dell.com/pub/Distros/RedHat``
``/RHEL5/5.3/Server/x86_64/install-x86_64/Server``
``/ImageMagick-6.2.8.0-4.el5_1.1.i386.rpm: (sha1)``
``dsa sha1 md5 gpg OK``


Verify Installed Files
--------------------------

``rpm -V`` (or ``--verify``) will compare existing files on the system to their pristine state in the packages they came from.

There are 8 points of comparison as shown in the following table, in the Michael Jang book and in the rpm man page:





Change Codes from rpm --verify
---------------------------------------


============ =====================
Change Code   Meaning
============ =====================
5             MD5 checksum
S             File size
L             Symbolic Link
T             Modification time
D             Device
U             User
G             Group
M             Mode
============ =====================




RPM Verify Sample Output
-----------------------------------

::
	
	#rpm -Va
	...
	
	S.5....T  c /etc/ntp.conf
	..?.....  c /etc/ntp/keys
	S.5....T    /usr/bin/aspell
	.......T    /usr/share/ImageMagick-6.2.8/config/magic.xml
	.......T  d /usr/share/doc/ImageMagick-6.2.8/images/arc.png
	.......T  d /usr/share/doc/ImageMagick-6.2.8/images/background.jpg
	
	...







Identifying Installed Packages
--------------------------------------

View a list of the packages originally installed on the system::

	# less /root/install.log

View a list of the packages installed through yum::

	# less /var/log/yum.log
		
Query the RPM database for the packages installed right now::

	# rpm -qa 






Managing Software:  Building RPMs
-------------------------------------


As of this writing, Red Hat is pointing users to the following RPM Guide from the Fedora project for more information on RPM creation:
 
http://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/

Inside an RPM package
-------------------------

* files
* scripts
* metadata

The package is defined by a "build specification file" or *spec file*.

A good example of a spec file can be obtained from the source rpm for redhat-release.
 
ftp://ftp.redhat.com/pub/redhat/linux/enterprise/6Server/en/os/SRPMS/redhat-release-server-6Server-6.0.0.37.el6.src.rpm

.. Tip:: Open .spec files in vim for color highlighting

Main contents of a .spec file
----------------------------------

* Introduction or preamble: Contains metadata about the package

* Build instructions on how to compile the source code or otherwise prepare the package payload.

* Scriptlets that perform the installation, uninstallation, or upgrade.

* Manifest of files to be installed, along with their permissions.

* Changelog recording the changes made to the package with each revision.

Preamble directives
----------------------

Name
    Name of the package

Version
    Version identifier
	
Release
    Indicates incremental changes within a version.

Group
    The package group that should include this package. This can come from the list at ``/usr/share/doc/rpm-*/GROUPS`` or can be unique to you.  Not related to yum package groups.

License
    Short License Identifier as described at http://fedoraproject.org/wiki/Packaging/LicensingGuidelines

Summary
    Short (<=50 chars) one-line description.

Source
    The file to be used as the source code.  Add'l sources can be specified as Source0, Source1, etc.

BuildArch
    Arch to use when building.  Defaults to the existing system arch.  May also be "noarch" for arch-independent packages.

Requires
    Requirements that this package needs to run. Can be in the form of files or other packages

BuildRequires
    Requirements needed to build this package.


Required Spec file sections
------------------------------

%description

%prep

%build

%install

%clean

%files

%changelog


Package Building Tools
-------------------------

These packages will provide tools for setting up a build environment and the ability to create your own packages.

* rpm-build
* rpmdevtools
* rpmlint

Setting up a Build Environment
----------------------------------

As a non-privileged user, run::

    $ rpmdev-setuptree

This should create the following directory structure in your home directory::

     ~/rpmbuild
    |-- BUILD
    |-- RPMS
    |-- SOURCES
    |-- SPECS
    \-- SRPMS


In that structure, your source files (in a tarball) should be placed ~/rpmbuild/SOURCES/ and your .spec file in ~/rpmbuild/SPECS/. The ~/rpmbuild/BUILD/ directory will be a temporary working directory for the build process. And, after the rpmbuild process is complete, the finished binary and source RPMs will be placed in ~/rpmbuild/RPMS/ and ~/rpmbuild/SRPMS/, respectively.

Viewing the Build Environment
-----------------------------------

When diagnosing build problems, it is sometimes useful to see what files are actually being created in the build environment in order to identify deviations of actual behavior from expected behavior. The tree utility is useful for that.

Install tree with ``# yum install tree``.

Invoke tree with ``$ tree ~/rpmbuild`` to show the contents of the build environment.

Building the RPM
------------------------

With the source files in place and a properly configured ``.spec`` file written, the ``rpmbuild`` command can be used to build the rpm either at once, or (for troubleshooting) in stages

``$ rpmbuild -bp <spec file>``
    Builds through the ``%prep`` section -- unpacks sources and applies patches.

``$ rpmbuild -bc <spec file>``
    Builds through compile -- processes the ``%prep`` and ``%build`` sections.

``$ rpmbuild -bi <spec file>``
    Builds through ``%install`` -- processes ``%prep``, ``%build``, and ``%install``.

``$ rpmbuild -bb <spec file>``
    Builds only the binary rpm file.

``$ rpmbuild -bs <spec file>``
    Builds only the source rpm file.

``$ rpmbuild -ba <spec file>``
    Builds both the binary and source rpm files.    

Use ``rpmbuild --help`` or ``man rpmbuild`` for other options.

RPM Building Exercise
--------------------------

As root, install rpm-build, rpmlint, rpmdevtools::

    # yum -y install rpmbuild rpmdevtools rpmlint

As a non-privileged user, create a project directory::

    $ mkdir ~/hello-1.0

.. 

    Name this according to the convention: <projname>-<majorver>.<minorver>

Create bash script: ~/hello-1.0/hello.sh

::

    #!/bin/bash
    # hello.sh
    echo 'hello'
    exit 0

Create a tarball of the project directory::

    $ tar cvzf hello-1.0.tar.gz ~/hello-1.0/



Create an rpm development environment::

    $ rpmdev-setuptree


Move the tarball to the SOURCES directory

Create a .spec file in the SPECS directory::

    $ vim pkgname.spec

or::

    $ rpmdev-newspec -o pkgname.spec

Insert a name (Match the pkgname on the tarball and direcotory)

Insert a version (Match the version)

Leave the release alone

Insert a summary (one line)

Insert a group (package group)

Insert a license

Insert a URL or delete the line

Insert on the Source0 line, the name of your tarball

Leave the BuildRoot line alone

Unless your package has prerequisites needed before it can be compiled, delete the BuildRequires line

Unless your package has prerequisites needed before it can work, delete the Requires line

On a blank line below %description, insert a brief description of your package

Leave the %prep and %setup lines alone

If your package does not need to be "built" (compiled), delete the %build, %configure, and make lines.

Leave the %install section header alone. 

Under the %install section, leave the rm line alone. 

If your package does not need to be built, modify the make install line to something like this::

    install -D myfile $RPM_BUILD_ROOT/path/to/install/dest/myfile

Leave the %clean and the rm -rf lines alone.

Under %files, use the following syntax to list each of the files your package will place on the target system::

    %attr(770,owner,group)/path/to/file

Use the following syntax to list each of the directories you package will place on the target system::

    %dir /root/bin

The changelog section can be deleted or left alone.




..                + Build a simple RPM that packages a single file




Signing Your RPMs
-----------------------


Your RPMs can be digitally signed to protect users from the possibility of forged packages (any RPM package can execute scripts w/ root privileges when installed!). To implement this, first generate and identify a gpg key::

    $ gpg --gen-key
    gpg (GnuPG) 2.0.14; Copyright (C) 2009 Free Software Foundation, Inc.
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.

    Please select what kind of key you want:
       (1) RSA and RSA (default)
       (2) DSA and Elgamal
       (3) DSA (sign only)
       (4) RSA (sign only)
    Your selection? 
    RSA keys may be between 1024 and 4096 bits long.
    What keysize do you want? (2048) 
    Requested keysize is 2048 bits
    Please specify how long the key should be valid.
             0 = key does not expire
          <n>  = key expires in n days
          <n>w = key expires in n weeks
          <n>m = key expires in n months
          <n>y = key expires in n years
    Key is valid for? (0) 
    Key does not expire at all
    Is this correct? (y/N) y

    GnuPG needs to construct a user ID to identify your key.

    Real name: Scott Purcell
    Email address: scott@texastwister.info
    Comment: 
    You selected this USER-ID:
        "Scott Purcell <scott@texastwister.info>"

    Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
    You need a Passphrase to protect your secret key.

    We need to generate a lot of random bytes. It is a good idea to perform
    some other action (type on the keyboard, move the mouse, utilize the
    disks) during the prime generation; this gives the random number
    generator a better chance to gain enough entropy.
    gpg: key B9AED1DE marked as ultimately trusted
    public and secret key created and signed.

    gpg: checking the trustdb
    gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
    gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
    pub   2048R/B9AED1DE 2011-02-22
          Key fingerprint = 9987 B276 A24A 1210 13A7  4D05 9F3F 8934 B9AE D1DE
    uid                  Scott Purcell <scott@texastwister.info>
    sub   2048R/0DA4CCE9 2011-02-22

    [scott@Client1 rhel6]$ 

The key ID can be seen in the output above, or can be found with gpg --fingerprint

Export the key to a file::

    $ gpg --armor --output ~/RPM-GPG-KEY-ScottPurcell --export B9AED1DE

.. 

    [scott@Client1 ~]$ cat RPM-GPG-KEY-ScottPurcell 
    -----BEGIN PGP PUBLIC KEY BLOCK-----
    Version: GnuPG v2.0.14 (GNU/Linux)
    
    mQENBE1jVagBCADVDTOvRl3Z5xPZb6AAl2D3bM/H4kEhyJ+yk1pbVPmu8yu0Cbsl
    . . . 
    R+J9rjvN8rNpQwm40Gx6RpM7qtP/LodzD46dNfbr87lJ4F+4A3U=
    =f4Gq
    -----END PGP PUBLIC KEY BLOCK-----

Configure rpm-related tools to use your signature::

    $ echo '%_gpg_name Scott Purcell'>> ~/.rpmmacros 

or::

    $ echo '%_gpg_name B9AED1DE'>> ~/.rpmmacros 

Now packages can be created and signed at the same time with rpmbuild using the --sign option. Or existing packages can be retroactively signed with rpm using the --addsign or --resign options.

With a signed package in place, the user intending to install it now needs to import the key::

    # rpm --import /home/scott/RPM-GPG-KEY-ScottPurcell

And with the key imported, the package can be verified::

    $ rpm -K rpmbuild/RPMS/x86_64/rhel6rhce-0.5-1.el6.x86_64.rpm
    rpmbuild/RPMS/x86_64/rhel6rhce-0.5-1.el6.x86_64.rpm: rsa sha1 (md5) pgp md5 OK



Create a Repo with your files
--------------------------------

(Assumes httpd already installed)

``# yum -y install createrepo``

``# mkdir -p /var/www/html/repo/Packages`` 

``# cp MyPackage.rpm /var/www/html/repo/Packages``

``# createrepo -v /var/www/html/repo``

``# cp /home/me/RPM-GPG-KEY-me /var/www/html/repo``



RPM Packaging, Other Documentation:
------------------------------------------

Red Hat Enterprise Linux Deployment Guide, section on "Querying RPM"

Man Pages:

    * rpm (8)
    * rpm2cpio (8)
    * cpio (1)
    

Manage Processes and Services
-------------------------------------------------------------------------------------------

Start a service:
    * ``service <servicename> start`` 
    * ``/etc/init.d/<servicescript> start``

Stop a service:
    * ``service <servicename> stop``
    * ``/etc/init.d/<servicescript> stop``

Check status of a service:
    * ``service <servicename> status``
    * ``/etc/init.d/<servicescript> status``

Reload a service's config:
    * ``service <servicename> reload``
    * ``/etc/init.d/<servicescript> reload``

Persistent Configuration of Services
-----------------------------------------

Configure a service to start at boot:
    * ``chkconfig <servicename> on``
    * ``system-config-services`` 
    * ``ntsysv``




Manage Processes and Services: Configure systems to boot into a specific runlevel automatically
-------------------------------------------------------------------------------------------------

``/etc/inittab``

Monitoring Processes
--------------------------

``ps``
    Highly configurable command to list running processes

``top``
    Command to provide realtime reports of the most active running processes

Killing Processes
----------------------

``kill``
    kills a process by PID.  Optionally sends "signals" other than "kill".

``kill-all``
    Kills a process by name.  Use care not to match names you don't intend to kill.

``pkill`` 
    Also kills processes by name.  Use care not to match names you don't intend to kill.

``pgrep``
    Searches processes by name. Useful for verifying which processes would be killed by pkill.

Prioritizing Processes
-------------------------

The kernel calculates the priority of each process through a variety of factors.  One input into that calculation is a user-modifiable value called "niceness". 

* A process with higher niceness has lower priority and is thus more willing to share resources with other processes.

* niceness can range from -20 (highest priority) to 19 (lowest priority).

``nice`` and ``renice`` commands
-----------------------------------

``nice``
    Launches commands with a specified "niceness" value affecting process priority.

    * Default niceness is "0".
    * Root can set any value.
    * Non-privileged users can only use positive values. 

``renice``
    Modifies the niceness of an already-running process.

    * Root can modify the niceness of any process in either direction.
    * Non-privileged users can only modify their own processes and by increasing niceness (lowering priority)


.. Identify CPU/memory intensive processes, adjust process priority with renice, and kill processes


Manage system performance
------------------------------

* Use /proc/sys and sysctl to modify and set kernel run-time parameters
* Produce and deliver reports on system utilization (processor, memory, disk, and network)
* Use shell scripting to automate system maintenance tasks

Manage Users and Groups
-----------------------------

* Create, delete, and modify local user accounts
* Change passwords and adjust password aging for local user accounts
* Create, delete and modify local groups and group memberships
* Configure a system to use an existing LDAP directory service for user and group information
* Configure system to authenticate using Kerberos

Session 4 Networking and Routing
=======================================

Network Configuration and Troubleshooting
------------------------------------------

Class discussion -- Populate a table explaining for each of the following aspects of network configuration: 1) How to view or verify the existing configuration, and 2) How to change the configuration.

* IP Address and Subnet Mask

* Routing and Default Gateway

* Hostname

* Name Resolution

    
IP Address and Subnet Mask
----------------------------

* Verifying configuration

    ``ip a``, ``ifconfig``

* Changing configuration

    ``nm_applet``, ``system-config-network``, manual editing of interface config files

Routing and Default Gateway
-----------------------------

* Verifying configuration

    ``route``, ``ip r``

* Changing configuration

    ``route``, ``ip r``, manual editing of route config files,
    

Hostname
------------

* Verifying configuration

* Changing configuration



Name Resolution
-----------------

* Verifying configuration

* Changing configuration

    

Two Controlling Services
--------------------------

**NetworkManager**

* RHEL6 default
* Ideal for client systems and systems with dynamic network conditions
* No support for bonding/bridging/aliases, etc.

**network**

* RHEL5 and earlier default
* Ideal for systems with static network conditions
* Bonding/bridging/aliases supported. 

Switching between Controlling Services
------------------------------------------

To disable NetworkManager and enable network::

    # service NetworkManager stop; chkconfig NetworkManager off
    # service network start; chkconfig network start

To disable network and enable NetworkManager::

    # service network stop; chkconfig network off
    # service NetworkManager start; chkconfig NetworkManager on

To exempt a particular interface from control by NetworkManager, but leave it in control of other interfaces:

* In the interface configuration file of the interface to be exempted, insert the line::

    NM_CONTROLLED=no

* Ensure both services are configured on and running.

* Configured interfaces can be brought up with ``ifup eth<x>`` or down with ``ifdown eth<x>`` regardless of whether they are managed by NetworkManager or not.


Network Configuration Files
-------------------------------

/etc/hosts
    Static hostname-to-IP resolution.

/etc/resolv.conf
    Client configuration for DNS.

/etc/sysconfig/network
    Main system networking config file.  Enables/disables networking in general, sets the hostname, and configures routing.

/etc/sysconfig/network-scripts/ifcfg-<ifname>
    Config file for each configured interface.

/etc/sysconfig/network-scripts/route-<name>
    Config file for static routes (where needed)

.. note:: 

    /etc/sysconfig/networking/ is used by system-config-network and should not be manually edited.


Reference
--------------

/usr/share/doc/initscripts-9.03.17/sysconfig.txt

Future (Near!) Network Device Naming Scheme
----------------------------------------------

http://linux.dell.com/files/whitepapers/consistent_network_device_naming_in_linux.pdf

Troubleshooting Toolkit
----------------------------

.. + *  Configure networking and hostname resolution statically or dynamically
.. + *  Route IP traffic and create static routes


Session 5 Firewalls and SELinux
========================================

Firewalling in RHEL6
------------------------

RHEL6 implements a packet filtering firewall called iptables. You should know several key terms:

rule
    A one-line rule defining a packet type and how it should be handled.

chain
    A list  of rules.

table
    A list of rules aggregating all of the chains and rules taking a particular path through the network stack.

policy
    A default rule that applies in the absence of other rules.
    

iptables Built-in Chains
------------------------------

INPUT
    Applies to traffic with your server as the destination.

OUTPUT
    Applies to traffic origination on your server as the source.

FORWARD
    Applies to traffic being routed by your system from one network to another

iptables Targets
---------------------

ACCEPT
    Allows the packet to proceed to its destination.

DROP
    Silently drop the packet.

REJECT
    Drop the packet with a rejection message

LOG
    Combined with other targets, also log the action

Connection Tracking States
--------------------------------

Iptables can filter packets based on their relationship with previous traffic.


NEW
    The packet has started a new connection.

ESTABLISHED
    Applies to packets that are part of an established TCP connection (packets have already been delivered in both directions).

RELATED
    The packet is starting a new connection, but associated with an existing connection.

INVALID
    The packet is associated with no known connection.





.. o IPTables
.. + * Configure firewall settings using system-config-firewall or iptables


SELinux
----------------



.. + * Set enforcing and permissive modes for SELinux
.. + * List and identify SELinux file and process context
.. + * Restore default file contexts
.. + * Use boolean settings to modify system SELinux settings
.. + * Diagnose and address routine SELinux policy violations

Session 6 Virtualization
================================

o KVM Virtualization
+ * Configure a physical machine to host virtual guests
+ * Install Red Hat Enterprise Linux systems as virtual guests
+ * Configure systems to launch virtual machines at boot
+ * Install Red Hat Enterprise Linux automatically using Kickstart


Session 7 Logging and remote access
=========================================

o + - Remote Logging
+ * Configure a system to log to a remote system
+ * Configure a system to accept logging from a remote system
o + - Remote Access
+ SSH
# * Install the packages needed to provide the service
# * Configure SELinux to support the service
# * Configure the service to start when the system is booted
# * Configure the service for basic operation
# * Configure host-based and user-based security for the service
# * Configure key-based authentication
# * Configure additional SSH options described in documentation
+ VNC
# * Install the packages needed to provide the service
# * Configure SELinux to support the service
# * Configure the service to start when the system is booted
# * Configure the service for basic operation
# * Configure host-based and user-based security for the service


Session 8 Network Time Protocol
====================================

o NTP
+ * Install the packages needed to provide the service
+ * Configure SELinux to support the service
+ * Configure the service to start when the system is booted
+ * Configure the service for basic operation
+ * Configure host-based and user-based security for the service


Session 9 HTTP and FTP
==============================

Session 10 NFS and Samba
================================

Session 11 DNS and SMTP
===============================


Session 12 Finish uncompleted topics, Review, or Practice Exam 
=======================================================================


Supplemental Topics
=========================



Manage Processes and Services: Schedule tasks using cron
--------------------------------------------------------------


