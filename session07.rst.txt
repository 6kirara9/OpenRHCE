Session 7 Logging and remote access
=========================================

RHEL 6 Logging with Rsyslog
-------------------------------

Red Hat uses ``rsyslog`` for its logging facility.  ``rsyslog`` can be configured to for local logging only, to send log messages to a remote destination as well, and to recieve log messages from other systems as well.

**Terms**

facility
    A name that indicates what the message concerns or from what service it originates.

priority
    A name that indicates the importance of the messages in that category.

The man pages for logger(1) and syslog(3) have more information.

``rsyslog`` is configured in ``/etc/rsyslog.conf`` and defaults to using port 514 (TCP or UDP) to send and receive messages.

Accepting Remote Logs
------------------------------------

By default, ``rsyslog`` is configured for only local logging.  To enable it to receive log messages from other systems, uncomment one of the following groups of lines in the config file (depending on which transport protocol, tcp or udp, you prefer to use):

For UDP (more widely supported but less reliable)::


    # Provides UDP syslog reception
    #$ModLoad imudp.so
    #$UDPServerRun 514


    

For TCP (less widely supported but more reliable)::

    # Provides TCP syslog reception
    #$ModLoad imtcp.so  
    #$InputTCPServerRun 514

After changing the appropriate lines, restart the service.

Rsyslog Configuration: Message Selection
---------------------------------------------

In ``/etc/rsyslog.conf`` in the "RULES" section, ensure that a rule exists (or write one) for the kind of messages you want to send.  The format is::

    <facility>.<priority>        <action>

facility
    One of: auth, authpriv, cron, daemon, kern, lpr, mail, news, syslog, user, uucp, local0-7, or "*"

priority
    One of (in ascending priority): debug, info, notice, warning (warn), err (error), crit, alert, emerg (panic), none, or "*" 

* Multiple facilities can be specified with the same priority with the use of a comma.

    ::
    
        uucp,news.crit       /var/log/spooler


* Multiple selectors (facility/priority pairs) can be specified for the same action with the use of a semicolon.

    ::
    
        *.info;mail.none;authpriv.none;cron.none   /var/log/messages



Rsyslog Configuration: Actions
----------------------------------

action
    One of the following:

        * A file, specified with a full path name.
        * A named pipe (fifo)
        * A terminal (tty) or console
        * A remote machine's IP or hostname, prefaced with "@" (for UDP), "@@" (for TCP), or ":omrelp:" for the RELP protocol.
        * A list of users (comma-delimited). This notifies them via console message if they are logged in. An asterisk (*) includes all logged-in users
        * A tilde, to indicate that these messages should be discarded.
        * See the documentation for others.
        
Practice
--------------

Configure one system to receive remote log messages.  Configure the other to log only a particular facility or priority to the remote syslog server.

Use ``logger`` to generate test messages.

Remember to investigate firewall and SELinux considerations.

.. o + - Remote Logging
.. + *..  Configure a system to log to a remote system
.. + * Configure a system to accept logging from a remote system
.. o + - Remote Access


Remote Access via SSH
-----------------------------

RedHat installs by default both the OpenSSH client package (openssh) and the server package (openssh-server)

Client behavior is configured in ``/etc/ssh/ssh_config``

Server behavior is configured in ``/etc/ssh/sshd_config``

Start the service::

    # service sshd start

Configure it persistently on::

    # chkconfig sshd on
    
Investigate SELinux implications for SSH
-------------------------------------------

Find SELinux Filesystem contexts that might affect ssh::

    semanage fcontext -l | grep "ssh"

Find SELinux port contexts that might affect ssh::

    semanage port -l | grep "ssh"
    

Find SELinux booleans that might affect ssh::

    getsebool -a | grep ssh

SSH key-based authentication
----------------------------------

Generate a key with ``ssh-keygen``

Transmit a key to a remote system with ``ssh-copy-id``

    * The key you want is usually named ``~/.ssh/id_rsa.pub``.  Be certain to use the .pub version of the key instead of the private key!


SSH Security Considerations
------------------------------

Allow root logins?
    Disallow with ``PermitRootLogin no`` in ``/etc/ssh/sshd_config``

Listen on specific interfaces?
    Specify with ``ListenAddress x.x.x.x`` in ``/etc/ssh/sshd_config``

Allow legacy versions?
    Specify allowed versions of the protocol in ``/etc/ssh/sshd_config`` (read comments).

Allow X11 forwarding?
    Configure with ``X11Forwarding yes|no`` in ``/etc/ssh/sshd_config``
     
Specify alternate port?
    Configure with ``Port xx`` in ``/etc/ssh/sshd_config``. Multiple ports on multiple lines accepted. Don't forget firewall and SELinux implications though!

    
.. # * Install the packages needed to provide the service
.. # * Configure SELinux to support the service
.. # * Configure the service to start when the system is booted
.. # * Configure the service for basic operation
.. # * Configure host-based and user-based security for the service
.. # * Configure key-based authentication
.. # * Configure additional SSH options described in documentation

Remote Access via VNC
----------------------------

For remote management when a GUI is desired or required, Red Hat provides VNC services through tigervnc.

Install the package with ``yum -y install tigervnc-server``.

Configure the service at /etc/sysconfig/vncservers

Start the service::

    # service vncserver start

Configure it persistently on::

    # chkconfig vncserver on 

Configuring a VNC remote display
----------------------------------

In ``/etc/sysconfig/vncservers`` uncomment and modify the lines below::

    # VNCSERVERS="2:myusername"
    # VNCSERVERARGS[2]="-geometry 800x600 -nolisten tcp -localhost"

Set a VNC password with ``vncpasswd``

Start or restart the service.

Connect from the remote system using a vnc client with the ``-via`` option.

Investigate SELinux implications for VNC
-------------------------------------------

Find SELinux Filesystem contexts that might affect vnc::

    # semanage fcontext -l | grep "vnc"

Find SELinux port contexts that might affect vnc::

    # semanage port -l | grep "vnc"
    
Find SELinux booleans that might affect vnc::

    # getsebool -a | grep vnc

    
.. # * Install the packages needed to provide the service
.. # * Configure SELinux to support the service
.. # * Configure the service to start when the system is booted
.. # * Configure the service for basic operation
.. # * Configure host-based and user-based security for the service


